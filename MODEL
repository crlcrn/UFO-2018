import copy

import networkx as nx

from database.DAO import DAO


class Model:
    def __init__(self):
        self._grafo = nx.DiGraph()
        self.adiacenti = []
        self.connessi = []
        self.predecessori = []
        self.successori = []
        self._solBest = []

    def buildGraph(self, anno):
        # Recupera i nodi dagli stati con avvistamenti
        nodes = DAO.getNodi(anno)
        self._grafo.clear()  # Pulisce il grafo precedente
        self._grafo.add_nodes_from(nodes)

        # Recupera gli avvistamenti come tuple (state, datetime)
        sightings = DAO.getSightings(anno)

        # Aggiungi archi al grafo in base all'ordine temporale
        for i in range(len(sightings)):
            state_a, time_a = sightings[i]  # Estrai lo stato e il tempo dalla tupla

            for j in range(i + 1, len(sightings)):
                state_b, time_b = sightings[j]  # Estrai lo stato e il tempo dalla tupla

                if time_b > time_a and state_a != state_b:
                    self._grafo.add_edge(state_a, state_b)  # Aggiungi un arco nel grafo

    def getAdiacent(self, stato):
        self.adiacenti = ["successori"]
        for e in self._grafo.successors(stato):
            self.adiacenti.append(e)
        self.adiacenti.append("predecessori")
        for e2 in self._grafo.predecessors(stato):
            self.adiacenti.append(e2)
        return self.adiacenti

    def getConnectedComponents(self, stato):
        return nx.dfs_tree(self._grafo, stato)

    def getBestPath(self, stato):
        self._solBest = []
        parziale = [stato]
        self.ricorsione(parziale)
        print(self._solBest)
        return self._solBest

    def ricorsione(self, parziale):
        if len(parziale) > len(self._solBest):
            self._solBest = copy.deepcopy(parziale)

        for n in self._grafo.successors(parziale[-1]):
            if n not in parziale:
                parziale.append(n)
                self.ricorsione(parziale)
                parziale.pop()


    def getCaratteristiche(self):
        return self._grafo.number_of_nodes(), self._grafo.number_of_edges()

